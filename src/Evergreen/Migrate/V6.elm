module Evergreen.Migrate.V6 exposing (..)

{-| This migration file was automatically generated by the lamdera compiler.

It includes:

  - A migration for each of the 6 Lamdera core types that has changed
  - A function named `migrate_ModuleName_TypeName` for each changed/custom type

Expect to see:

  - `Unimplement–µd` values as placeholders wherever I was unable to figure out a clear migration path for you
  - `@NOTICE` comments for things you should know about, i.e. new custom type constructors that won't get any
    value mappings from the old type by default

You can edit this file however you wish! It won't be generated again.

See <https://dashboard.lamdera.com/docs/evergreen> for more info.

-}

import Evergreen.V4.Api.Package
import Evergreen.V4.Domain.Dependency
import Evergreen.V4.Domain.Index
import Evergreen.V4.Route
import Evergreen.V4.Types
import Evergreen.V6.Api.Package
import Evergreen.V6.Domain.Dependency
import Evergreen.V6.Domain.Index
import Evergreen.V6.Route
import Evergreen.V6.Types
import Lamdera.Migrations exposing (..)
import List
import Maybe


frontendModel : Evergreen.V4.Types.FrontendModel -> ModelMigration Evergreen.V6.Types.FrontendModel Evergreen.V6.Types.FrontendMsg
frontendModel old =
    ModelMigrated ( migrate_Types_FrontendModel old, Cmd.none )


backendModel : Evergreen.V4.Types.BackendModel -> ModelMigration Evergreen.V6.Types.BackendModel Evergreen.V6.Types.BackendMsg
backendModel old =
    ModelMigrated ( migrate_Types_BackendModel old, Cmd.none )


frontendMsg : Evergreen.V4.Types.FrontendMsg -> MsgMigration Evergreen.V6.Types.FrontendMsg Evergreen.V6.Types.FrontendMsg
frontendMsg old =
    MsgUnchanged


toBackend : Evergreen.V4.Types.ToBackend -> MsgMigration Evergreen.V6.Types.ToBackend Evergreen.V6.Types.BackendMsg
toBackend old =
    MsgUnchanged


backendMsg : Evergreen.V4.Types.BackendMsg -> MsgMigration Evergreen.V6.Types.BackendMsg Evergreen.V6.Types.BackendMsg
backendMsg old =
    MsgMigrated ( migrate_Types_BackendMsg old, Cmd.none )


toFrontend : Evergreen.V4.Types.ToFrontend -> MsgMigration Evergreen.V6.Types.ToFrontend Evergreen.V6.Types.FrontendMsg
toFrontend old =
    MsgMigrated ( migrate_Types_ToFrontend old, Cmd.none )


migrate_Types_BackendModel : Evergreen.V4.Types.BackendModel -> Evergreen.V6.Types.BackendModel
migrate_Types_BackendModel old =
    { clients = old.clients
    , packages = old.packages |> List.map migrate_Api_Package_Package
    }


migrate_Types_FrontendModel : Evergreen.V4.Types.FrontendModel -> Evergreen.V6.Types.FrontendModel
migrate_Types_FrontendModel old =
    { key = old.key
    , route = old.route |> Maybe.map migrate_Route_Route
    , indexes = old.indexes |> List.map migrate_Domain_Index_Index
    , orphanedPackges = []
    }


migrate_Api_Package_Package : Evergreen.V4.Api.Package.Package -> Evergreen.V6.Api.Package.Package
migrate_Api_Package_Package old =
    { name = old.name
    , slug = (Unimplemented {- Type `String` was added in V6. I need you to set a default value. -})
    , summary = old.summary
    , license = old.license
    , version = old.version
    , exposedModules = old.exposedModules
    , elmVersion = old.elmVersion
    , dependencies = old.dependencies
    }


migrate_Domain_Dependency_Dependency : Evergreen.V4.Domain.Dependency.Dependency -> Evergreen.V6.Domain.Dependency.Dependency
migrate_Domain_Dependency_Dependency old =
    old


migrate_Domain_Index_Index : Evergreen.V4.Domain.Index.Index -> Evergreen.V6.Domain.Index.Index
migrate_Domain_Index_Index old =
    { dependency = old.dependency |> migrate_Domain_Dependency_Dependency
    , packages = old.packages |> List.map migrate_Api_Package_Package
    , slug = old.slug
    }


migrate_Route_Route : Evergreen.V4.Route.Route -> Evergreen.V6.Route.Route
migrate_Route_Route old =
    case old of
        Evergreen.V4.Route.Search p0 ->
            Evergreen.V6.Route.Search p0

        Evergreen.V4.Route.Home ->
            Evergreen.V6.Route.Home


migrate_Types_BackendMsg : Evergreen.V4.Types.BackendMsg -> Evergreen.V6.Types.BackendMsg
migrate_Types_BackendMsg old =
    case old of
        Evergreen.V4.Types.ClientConnected p0 p1 ->
            Evergreen.V6.Types.ClientConnected p0 p1

        Evergreen.V4.Types.ClientDisconnected p0 p1 ->
            Evergreen.V6.Types.ClientDisconnected p0 p1

        Evergreen.V4.Types.GotMetaResponse p0 ->
            Evergreen.V6.Types.GotMetaResponse p0

        Evergreen.V4.Types.GotPackageResponse p0 ->
            Evergreen.V6.Types.GotPackageResponse (p0 |> Result.map migrate_Api_Package_Package)


migrate_Types_ToFrontend : Evergreen.V4.Types.ToFrontend -> Evergreen.V6.Types.ToFrontend
migrate_Types_ToFrontend old =
    case old of
        Evergreen.V4.Types.GotPackages p0 ->
            Evergreen.V6.Types.GotPackages (p0 |> List.map migrate_Api_Package_Package)
